// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User = asso
model User {
  id                       String         @id @default(cuid())
  nameAsso                 String?
  isPremium                Boolean        @default(false)
  email                    String?        @unique
  emailVerified            DateTime?
  password                 String?
  accounts                 Account[]
  sessions                 Session[]
  event                    Event[]
  adherent                 Adherent[]
  idea                     Idea[]
  team                     Team[]
  partenariats             Partenariats[]
  createdAt                DateTime       @default(now())
  resetPasswordToken       String?        @unique
  resetPasswordTokenExpiry DateTime?
}

model Idea {
  id        String   @id @default(cuid())
  userId    String
  titleIdea String?
  idea      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id               String        @id @default(cuid())
  userId           String
  nameEvent        String
  dateEvent        DateTime
  intervenantEvent Intervenant[]
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Intervenant {
  id              String @id @default(cuid())
  eventId         String
  nameIntervenant String
  roleIntervenant String
  event           Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Adherent {
  id                String   @id @default(cuid())
  userId            String
  name              String
  emailAdherent     String?
  benevolAdherent   Boolean
  telephoneAdherent String?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id         String   @id @default(cuid())
  userId     String
  nameTeam   String
  roleTeam   String?
  emailTeam  String?
  numberTeam String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Partenariats {
  id              String   @id @default(cuid())
  userId          String
  namePartenariat String
  domaine         String?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
